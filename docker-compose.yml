services:
  crawl4ai:
    # Build the image using the Dockerfile in the repo
    build:
      context: .  # Use the repo root as context
      dockerfile: Dockerfile # The main Dockerfile
      args:
        # Ensure GPU support is ENABLED during build
        ENABLE_GPU: "true"
        # Specify Python version if needed, default is likely fine
        # PYTHON_VERSION: "3.10"
        # Choose install type if needed ('all' might be best for GPU features)
        INSTALL_TYPE: "all"
      # Specify the platform
      platforms:
        - linux/amd64
    container_name: devdocs-crawl4ai-local # Give it a distinct name
    ports:
      - "11235:11235"
      # Add other ports from base-config if needed (8000, 9222, 8080?)
    environment:
      # Set API tokens via Portainer environment variables or secrets
      - CRAWL4AI_API_TOKEN=${CRAWL4AI_API_TOKEN:-devdocs-demo-key} # Example
      - NVIDIA_VISIBLE_DEVICES=all # Often helpful for CUDA apps
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility # Explicitly add capabilities env var
      # Add OPENAI_API_KEY, CLAUDE_API_KEY etc. if used by crawl4ai
    volumes:
      - /dev/shm:/dev/shm
      # Mount your crawl_results relative to Portainer's data path or use a named volume
      # Option A: Relative path (Careful with this in Portainer)
      # - ./crawl_results:/app/crawl_results
      # Option B: Named Volume (Recommended)
      - crawl4ai_results:/app/crawl_results
    networks:
      # Connect to the same network as your other devdocs services
      - devdocs-network
    restart: unless-stopped
    # --- Runtime GPU Request ---
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: ["gpu"]
              driver: cdi
              options:
                virtualization: false
              device_ids:
                - nvidia.com/gpu=all

# Define the network if deploying this standalone,
# otherwise ensure 'devdocs-network' exists from your main stack
networks:
  devdocs-network:
    external: true # Assumes the network is created by your main stack

# Define the named volume if you chose Option B
volumes:
  crawl4ai_results:
